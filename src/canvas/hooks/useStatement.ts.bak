// import Draw from '..'
import type { DrawInterface } from '#/canvas'

/**
 * 声明变量
 * @param Draw 绘制对象
 * @param options 参数
 */
export const useStatement = (Draw: DrawInterface, options: { name: string; value: any }) => {
  const { name, value } = options

  // 计算块的宽度
  let blcokWidth = Draw.ctx.measureText(value).width
  blcokWidth = blcokWidth > 100 ? blcokWidth : 100

  // 绘制变量块
  const drawStatement = () => {
    Draw.drawRect(20, 100, blcokWidth, 50, 'orange')
    setTimeout(() => requestAnimationFrame(drawStatementName), 1000)
  }

  // 绘制变量名
  const drawStatementName = () => {
    // 计算坐标，使其保持在变量块下方居中
    const x = 20 + (100 - Draw.ctx.measureText(name).width) / 2
    const y = blcokWidth + (50 + Draw.ctx.measureText(name).actualBoundingBoxAscent) / 2 + 40
    Draw.drawText(x, y, name, '#000')
    setTimeout(() => requestAnimationFrame(drawStatementValue), 1000)
  }

  // 绘制初始值
  const drawStatementValue = () => {
    // 要求始终文字在于居中
    const x = 10 + (100 - Draw.ctx.measureText(value).width) / 2
    const y = blcokWidth + (50 + Draw.ctx.measureText(value).actualBoundingBoxAscent) / 2

    Draw.drawText(x, y, value, '#fff')
  }

  setTimeout(() => requestAnimationFrame(drawStatement), 1000)
}


